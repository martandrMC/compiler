// Written using a modified version of Princeton University's
// parser generator tool: (Its BNF is quite limited as is visible below)
// https://www.cs.princeton.edu/courses/archive/spring20/cos320/LL1/

// Start symbol expands to BLOCK EOF

BLOCK ::= var TYPE id = VAR_INIT BLOCK
BLOCK ::= STMT_EXPR_SEM BLOCK
BLOCK ::= ''

VAR_INIT ::= STMT VAR_STMT_NEXT
VAR_INIT ::= PREC_0 VAR_EXPR_NEXT

VAR_EXPR_NEXT ::= , id = VAR_INIT
VAR_EXPR_NEXT ::= ;
VAR_STMT_NEXT ::= , id = VAR_INIT
VAR_STMT_NEXT ::= ''

TYPE ::= nat
TYPE ::= int
TYPE ::= bool

STMT_EXPR ::= STMT
STMT_EXPR ::= PREC_0
STMT_EXPR_SEM ::= STMT
STMT_EXPR_SEM ::= PREC_0 ;
STMT_EXPR_END ::= STMT
STMT_EXPR_END ::= PREC_0 end

STMT ::= do BLOCK end
STMT ::= if STMT_EXPR : STMT_EXPR IF_NEXT
STMT ::= while STMT_EXPR : STMT_EXPR_END
STMT ::= return STMT_EXPR_SEM

IF_NEXT ::= else STMT_EXPR_END
IF_NEXT ::= end

================================

PREC_0 ::= PREC_1 PREC_0'
PREC_0' ::= = PREC_1 PREC_0'
PREC_0' ::= += PREC_1 PREC_0'
PREC_0' ::= -= PREC_1 PREC_0'
PREC_0' ::= *= PREC_1 PREC_0'
PREC_0' ::= /= PREC_1 PREC_0'
PREC_0' ::= %= PREC_1 PREC_0'
PREC_0' ::= ''

PREC_1 ::= PREC_2 PREC_1'
PREC_1' ::= and PREC_2 PREC_1'
PREC_1' ::= or PREC_2 PREC_1'
PREC_1' ::= ''

PREC_2 ::= UNARIES_2 PREC_3 PREC_2'
PREC_2' ::= < PREC_3 PREC_2'
PREC_2' ::= <= PREC_3 PREC_2'
PREC_2' ::= > PREC_3 PREC_2'
PREC_2' ::= >= PREC_3 PREC_2'
PREC_2' ::= <> PREC_3 PREC_2'
PREC_2' ::= == PREC_3 PREC_2'
PREC_2' ::= ''

UNARIES_2 ::= not
UNARIES_2 ::= ''

PREC_3 ::= PREC_4 PREC_3'
PREC_3' ::= + PREC_4 PREC_3'
PREC_3' ::= - PREC_4 PREC_3'
PREC_3' ::= ''

PREC_4 ::= PREC_5 PREC_4'
PREC_4' ::= * PREC_5 PREC_4'
PREC_4' ::= / PREC_5 PREC_4'
PREC_4' ::= % PREC_5 PREC_4'
PREC_4' ::= ''

PREC_5 ::= UNARIES_5 TERM

UNARIES_5 ::= +
UNARIES_5 ::= -
UNARIES_5 ::= ''

TERM ::= ( PREC_0 )
TERM ::= id TERM'
TERM ::= num
TERM ::= true
TERM ::= false
TERM ::= nil
TERM' ::= ( FUNC )
TERM' ::= ''

FUNC ::= STMT_EXPR FUNC'
FUNC ::= ''
FUNC' ::= , STMT_EXPR FUNC'
FUNC' ::= ''
