// Written using a modified version of Princeton University's
// parser generator tool: (Its BNF is quite limited as is visible below)
// https://www.cs.princeton.edu/courses/archive/spring20/cos320/LL1/

// Start symbol expands to BLOCK EOF

BLOCK ::= var id TYPE = VAR_INIT BLOCK
BLOCK ::= STMT_EXPR' BLOCK
BLOCK ::= ''

VAR_INIT ::= STMT VAR_STMT_NEXT
VAR_INIT ::= EXPR VAR_EXPR_NEXT

VAR_EXPR_NEXT ::= , id TYPE = VAR_INIT
VAR_EXPR_NEXT ::= ;
VAR_STMT_NEXT ::= , id TYPE = VAR_INIT
VAR_STMT_NEXT ::= ''

TYPE ::= : TYPE'
TYPE ::= ''
TYPE' ::= nat
TYPE' ::= int
TYPE' ::= bool

// Return is inaccurate, the semicolon is omitted from expressions
// when inside statements (with the exception of blocks)
STMT ::= while STMT_EXPR CONTENT
STMT ::= if STMT_EXPR IF
STMT ::= return STMT_EXPR'
STMT ::= do BLOCK end

CONTENT ::= : STMT_EXPR end
CONTENT ::= do BLOCK end

IF ::= : STMT_EXPR ELIF
IF ::= do BLOCK ELIF
ELIF ::= elif STMT_EXPR IF
ELIF ::= else CONTENT
ELIF ::= end

STMT_EXPR ::= STMT
STMT_EXPR ::= EXPR
STMT_EXPR' ::= STMT
STMT_EXPR' ::= EXPR ;

================================

// Shunting Yard Simulation
EXPR ::= ATOM EXPR'
EXPR' ::= bop ATOM EXPR'
EXPR' ::= ''
ATOM :: uop ATOM
ATOM ::= TERM

TERM ::= ( EXPR )
TERM ::= id TERM'
TERM ::= num
TERM ::= true
TERM ::= false
TERM ::= nil
TERM' ::= ( FUNC )
TERM' ::= ''

FUNC ::= STMT_EXPR FUNC'
FUNC ::= ''
FUNC' ::= , STMT_EXPR FUNC'
FUNC' ::= ''
