// Written using a modified version of Princeton University's
// parser generator tool: (Its BNF is quite limited as is visible below)
// https://www.cs.princeton.edu/courses/archive/spring20/cos320/LL1/

// Start symbol expands to BLOCK EOF

BLOCK ::= STMT_EXPR_SEM BLOCK
BLOCK ::= var TYPE id VAR_INIT BLOCK
BLOCK ::= ''

VAR_INIT ::= = VAR_INIT'
VAR_INIT ::= VAR_STMT_NEXT
VAR_INIT' ::= STMT VAR_STMT_NEXT
VAR_INIT' ::= EXPR VAR_EXPR_NEXT

VAR_EXPR_NEXT ::= , id VAR_INIT
VAR_EXPR_NEXT ::= ;
VAR_STMT_NEXT ::= , id VAR_INIT
VAR_STMT_NEXT ::= ''

TYPE ::= nat
TYPE ::= int
TYPE ::= bool

STMT_EXPR ::= STMT
STMT_EXPR ::= EXPR
STMT_EXPR_SEM ::= STMT
STMT_EXPR_SEM ::= EXPR ;
STMT_EXPR_END ::= STMT
STMT_EXPR_END ::= EXPR end

STMT ::= do BLOCK end
STMT ::= if STMT_EXPR : STMT_EXPR IF_NEXT
STMT ::= while STMT_EXPR : STMT_EXPR_END
STMT ::= return STMT_EXPR_SEM

IF_NEXT ::= else : STMT_EXPR_END
IF_NEXT ::= end

// Expressions not final
EXPR ::= id
