#include "lexer/lexer.h"

/*
	This file was hand-written using the grammar specification. The
	file is called grammar.bnf and located at the root of the project.
	The parser generator tool also assisted in the verification.
*/

// START
#define FIRST_START \
	FIRST_BLOCK \
	case TOK_EOF:
#define FOLLOW_START
#define SWITCH_START

// BLOCK
#define FIRST_BLOCK \
	case TOK_KW_VAR: \
	FIRST_STMT_EXPR_SEM
#define FOLLOW_BLOCK \
	case TOK_KW_END: \
	case TOK_EOF:
#define SWITCH_BLOCK

// VAR_INIT
#define FIRST_VAR_INIT \
	case TOK_OP_ASSIGN: \
	FIRST_VAR_STMT_NEXT
#define FOLLOW_VAR_INIT \
	FIRST_BLOCK \
	FOLLOW_BLOCK \
	FOLLOW_VAR_EXPR_NEXT \
	FOLLOW_VAR_STMT_NEXT
#define SWITCH_VAR_INIT

// VAR_INIT'
#define FIRST_VAR_INIT_ \
	FIRST_STMT \
	FIRST_PREC_0
#define FOLLOW_VAR_INIT_ \
	FOLLOW_VAR_INIT
#define SWITCH_VAR_INIT_

// VAR_EXPR_NEXT
#define FIRST_VAR_EXPR_NEXT \
	case TOK_COMMA: \
	case TOK_SEMICOLON:
#define FOLLOW_VAR_EXPR_NEXT \
	FOLLOW_VAR_INIT_
#define SWITCH_VAR_EXPR_NEXT

// VAR_STMT_NEXT
#define FIRST_VAR_STMT_NEXT \
	case TOK_COMMA:
#define FOLLOW_VAR_STMT_NEXT \
	FOLLOW_VAR_INIT \
	FOLLOW_VAR_INIT_
#define SWITCH_VAR_STMT_NEXT

// TYPE
#define FIRST_TYPE \
	case TOK_TYPE_NAT: \
	case TOK_TYPE_INT: \
	case TOK_TYPE_BOOL:
#define FOLLOW_TYPE \
	case TOK_IDENT:
#define SWITCH_TYPE

// STMT_EXPR
#define FIRST_STMT_EXPR \
	FIRST_STMT \
	FIRST_PREC_0
#define FOLLOW_STMT_EXPR \
	case TOK_COLON: \
	FIRST_IF_NEXT \
	FIRST_FUNC_ \
	FOLLOW_FUNC_
#define SWITCH_STMT_EXPR

// STMT_EXPR_SEM
#define FIRST_STMT_EXPR_SEM \
	FIRST_STMT \
	FIRST_PREC_0
#define FOLLOW_STMT_EXPR_SEM \
	FIRST_BLOCK \
	FOLLOW_BLOCK \
	FOLLOW_STMT
#define SWITCH_STMT_EXPR_SEM

// STMT_EXPR_END
#define FIRST_STMT_EXPR_END \
	FIRST_STMT \
	FIRST_PREC_0
#define FOLLOW_STMT_EXPR_END \
	FOLLOW_STMT \
	FOLLOW_IF_NEXT
#define SWITCH_STMT_EXPR_END

#define FIRST_STMT \
	case TOK_KW_DO: \
	case TOK_KW_IF: \
	case TOK_KW_WHILE: \
	case TOK_KW_RETURN:
#define FOLLOW_STMT \
	FOLLOW_STMT_EXPR \
	FOLLOW_STMT_EXPR_SEM \
	FOLLOW_STMT_EXPR_END
#define SWITCH_STMT

#define FIRST_IF_NEXT \
	case TOK_KW_ELSE: \
	case TOK_KW_END:
#define FOLLOW_IF_NEXT \
	FOLLOW_STMT
#define SWITCH_IF_NEXT

#define FIRST_PREC_0 \
	FIRST_PREC_1
#define FOLLOW_PREC_0 \
	FIRST_VAR_EXPR_NEXT \
	FOLLOW_STMT_EXPR \
	case TOK_SEMICOLON: \
	case TOK_KW_END:
#define SWITCH_PREC_0

#define FIRST_PREC_0_ \
	case TOK_OP_ASSIGN: \
	case TOK_OP_PLUS_ASSIGN: \
	case TOK_OP_MINUS_ASSIGN: \
	case TOK_OP_MULT_ASSIGN: \
	case TOK_OP_DIV_ASSIGN: \
	case TOK_OP_MOD_ASSIGN:
#define FOLLOW_PREC_0_ \
	FOLLOW_PREC_0
#define SWITCH_PREC_0_

#define FIRST_PREC_1 \
	FIRST_PREC_2
#define FOLLOW_PREC_1 \
	FIRST_PREC_0_ \
	FOLLOW_PREC_0_
#define SWITCH_PREC_1

#define FIRST_PREC_1_ \
	case TOK_KW_AND: \
	case TOK_KW_OR:
#define FOLLOW_PREC_1_ \
	FOLLOW_PREC_1
#define SWITCH_PREC_1_

#define FIRST_PREC_2 \
	FIRST_UNARIES_2 \
	FIRST_PREC_3
#define FOLLOW_PREC_2 \
	FIRST_PREC_1_ \
	FOLLOW_PREC_1_
#define SWITCH_PREC_2

#define FIRST_PREC_2_ \
	case TOK_OP_LESS: \
	case TOK_OP_LESS_EQ: \
	case TOK_OP_GREATER: \
	case TOK_OP_GREATER_EQ: \
	case TOK_OP_DIFFERENT: \
	case TOK_OP_EQUAL:
#define FOLLOW_PREC_2_ \
	FOLLOW_PREC_2
#define SWITCH_PREC_2_

#define FIRST_UNARIES_2 \
	case TOK_KW_NOT:
#define FOLLOW_UNARIES_2 \
	FIRST_PREC_3
#define SWITCH_UNARIES_2

#define FIRST_PREC_3 \
	FIRST_PREC_4
#define FOLLOW_PREC_3 \
	FIRST_PREC_2_ \
	FOLLOW_PREC_2_
#define SWITCH_PREC_3

#define FIRST_PREC_3_ \
	case TOK_OP_PLUS: \
	case TOK_OP_MINUS:
#define FOLLOW_PREC_3_ \
	FOLLOW_PREC_3
#define SWITCH_PREC_3_

#define FIRST_PREC_4 \
	FIRST_PREC_5
#define FOLLOW_PREC_4 \
	FIRST_PREC_3_ \
	FOLLOW_PREC_3_
#define SWITCH_PREC_4

#define FIRST_PREC_4_ \
	case TOK_OP_MULT: \
	case TOK_OP_DIV: \
	case TOK_OP_MOD:
#define FOLLOW_PREC_4_ \
	FOLLOW_PREC_4
#define SWITCH_PREC_4_

#define FIRST_PREC_5 \
	FIRST_UNARIES_5 \
	FIRST_TERM
#define FOLLOW_PREC_5 \
	FIRST_PREC_4_ \
	FOLLOW_PREC_4_
#define SWITCH_PREC_5

#define FIRST_UNARIES_5 \
	case TOK_OP_PLUS: \
	case TOK_OP_MINUS:
#define FOLLOW_UNARIES_5 \
	FIRST_TERM
#define SWITCH_UNARIES_5

#define FIRST_TERM \
	case TOK_OPEN_ROUND: \
	case TOK_IDENT: \
	case TOK_LIT_NUM: \
	case TOK_KW_TRUE: \
	case TOK_KW_FALSE: \
	case TOK_KW_NIL:
#define FOLLOW_TERM \
	FOLLOW_PREC_5
#define SWITCH_TERM

#define FIRST_TERM_ \
	case TOK_OPEN_ROUND: \
#define FOLLOW_TERM_ \
	FOLLOW_TERM
#define SWITCH_TERM_

#define FIRST_FUNC \
	FIRST_STMT_EXPR
#define FOLLOW_FUNC \
	case TOK_CLOSE_ROUND: \
#define SWITCH_FUNC

#define FIRST_FUNC_ \
	case TOK_COMMA:
#define FOLLOW_FUNC_ \
	FOLLOW_FUNC
#define SWITCH_FUNC_
